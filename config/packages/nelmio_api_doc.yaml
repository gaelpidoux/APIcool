nelmio_api_doc:
  documentation:
    servers:
      - url: http://localhost:8000/
        description: API over HTTP
    info:
      title: APIcool 
      description: >
        APIcool est une API qui sera en lien avec d'autres outils internes à l'entreprise SAVOYE.
        Son objectif est de retourner des valeurs d'outil tel que LMD depuis une BDD.
        Elle sera combinée avec une application mobile et un Grafana.


        Pour cette partie, deux points sont importants :

        1. L'API ne stockera pas les connexions client, c'est pourquoi je ne me suis pas embêté
           à encoder les mots de passe de dataclient (pour les utilisateurs, par contre, oui).
        2. La partie métier est simplifiée à 1% de ce que je retrouve en réalité. Cela peut donner
           l'impression que l'API est simpliste, mais j'ai regroupé exprès les vérifications contenues
           dans la table devclientprincipalverif des données très simples pour des tests.
        Voilà voilà, enjoy!
      version: 1.0.0
    paths:
      /api/login_check:
        post:
          operationId: postCredentialsItem
          tags:
            - Token
          summary: Permet d'obtenir le token JWT pour se logger.
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  required:
                    - username
                    - password
                  properties:
                    username:
                      type: string
                      example: "admin"
                    password:
                      type: string
                      example: "password"
          responses:
            "200":
              description: Récupère le token JWT
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token:
                        type: string
                        example: "67abf20ff7833531980b380f08b7e44876857376dd6256d..."
      /api/token/refresh?refresh_token:
        get:
          operationId: refreshCredentialsItem
          tags:
            - Token
          summary: Permet de rafraichir un token JWT
          parameters:
            - name: refresh_token
              in: query
              description: Le token de rafraîchissement
              required: true
              schema:
                type: string
                example: "67abf20ff7833531980b380f08b7e44876857376dd6256d..."
          responses:
            "200":
              description: Récupère le token JWT
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token:
                        type: string
                        example: "67abf20ff7833531980b380f08b7e44876857376dd6256d..."
    components:
      schemas:
        User:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            username:
              type: string
      securitySchemes:
        Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      security:
        - Bearer: []
  areas:
    path_patterns:
      - ^/api(?!/doc$)
